@model TicketViewModel

@{
    @inject UserManager<User> userManager;
    @inject IServiceFactory serviceFactory;
    var rolePermissionsService = serviceFactory.GetRolePermissionsService();
    var loggedInUser = await userManager.GetUserAsync(User);
    if (loggedInUser == null)
    {
        Context.Response.Redirect("/Identity/Account/Login");
        return;
    }
    if (!await rolePermissionsService.HasPermission(loggedInUser, RolePermissions.DeleteTickets))
    {
        Context.Response.Redirect("/Home/PermissionError");
        return;
    }
}

@{
    ViewData["Title"] = "Delete";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Ticket</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.WorkOrder)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.WorkOrder)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TicketType)
        </dt>
        <dd class = "col-sm-10">
            @Html.Raw(Model.TicketType.GetText())
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.TicketStatus)
        </dt>
        <dd class="col-sm-10">
            @Html.Raw(Model.TicketStatus.GetText())
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="Id" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>
