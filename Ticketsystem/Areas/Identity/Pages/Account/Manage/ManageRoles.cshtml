@page
@model ManageRolesModel

@{
    ViewData["Title"] = "Rollen verwalten";
}

@{
    @inject UserManager<User> userManager;
    @inject IServiceFactory serviceFactory;
    var loggedInUser = await userManager.GetUserAsync(User);
    if (!await serviceFactory.GetRolePermissionsService().HasPermissionAsync(loggedInUser, RolePermissions.ManageRoles))
    {
        Response.Redirect("PermissionError");
        return;
    }
}

<div class="col-sm-12 col-md-12 col-lg-8 col-xl-6 col-xxl-6">
    <h3>@ViewData["Title"]</h3>
    <hr />
    <form method="post">
        @Html.AntiForgeryToken()

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Rolle</th>
                    <th class="text-end">Aktionen</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var role in Model.RolesToDisplay)
                {
                    <tr class="align-middle">
                        @{
                            if (role == DefaultRoles.Administrator.ToString())
                            {
                                <td>@role (alle Rechte)</td>
                            }
                            else
                            {
                                <td>@role</td>
                            }
                            <td class="text-end text-nowrap">
                                @if (
                                    await serviceFactory.GetRolePermissionsService().HasPermissionAsync(loggedInUser, RolePermissions.ChangeRolePermissions) && 
                                    !(role == DefaultRoles.Administrator.ToString())
                                )
                                {
                                    <span>
                                        <button type="submit" class="btn btn-info text-nowrap" asp-page-handler="Edit" asp-route-role="@role">
                                            Bearbeiten
                                        </button>
                                    </span>
                                }
                                @if (await serviceFactory.GetRolePermissionsService().HasPermissionAsync(loggedInUser, RolePermissions.DeleteRoles))
                                {
                                    bool isDefaultRole = false;
                                    foreach (var defaultRole in Enum.GetValues<DefaultRoles>())
                                    {
                                        if (role == defaultRole.ToString())
                                        {
                                            isDefaultRole = true;
                                            break;
                                        }
                                    }
                                    @if (!isDefaultRole)
                                    {
                                        @if (await serviceFactory.GetRolePermissionsService().HasPermissionAsync(loggedInUser, RolePermissions.ChangeRolePermissions))
                                        {
                                            <span class="me-2"></span>
                                        }
                                        <span>
                                            <button type="submit" class="btn btn-info text-nowrap" asp-page-handler="Delete" asp-route-role="@role">
                                                Löschen
                                            </button>
                                        </span>
                                    }
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
        @if (await serviceFactory.GetRolePermissionsService().HasPermissionAsync(loggedInUser, RolePermissions.AddRoles))
        {
            <button type="submit" class="btn btn-info text-nowrap" asp-page-handler="Add">
                Neue Rolle
            </button>
        }
    </form>
</div>
