@page
@model EditRolePermissionsModel
@{
    ViewData["ActivePage"] = ManageNavPages.EditRolePermissions;
}

@{
    @inject UserManager<User> userManager;
    @inject IDbAccessFactory serviceFactory;
    var rolePermissionsService = serviceFactory.RolePermissionsDbAccess;
    var loggedInUser = await userManager.GetUserAsync(User);
    if (loggedInUser == null)
    {
        Response.Redirect("/Identity/Account/Login");
    }
    else if (!await rolePermissionsService.HasPermission(loggedInUser, RolePermissions.ChangeRolePermissions))
    {
        Response.Redirect("/Home/PermissionError");
        return;
    }
}

<div class="col-sm-12 col-md-12 col-lg-8 col-xl-6 col-xxl-6">
    <h3>
        <span>Berechtigungen für Rolle </span>
        <span style="font-weight: bold;"> @Model.RoleToEdit</span>
    </h3>
    <hr />
    <form method="post">
        @Html.AntiForgeryToken()
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:50px;"></th>
                    <th>Berechtigung</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var permission in Enum.GetValues<RolePermissions>())
                {
                    <tr class="align-middle">
                        <td>
                            <input type="checkbox" name="permissions" value="@permission.ToString()" @(Model.Permissions.Contains(permission.ToString()) ? "checked" : "") />
                        </td>
                        <td>
                            @permission.GetText()
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="submit" class="btn btn-info" asp-page-handler="Save" asp-route-role="@Model.RoleToEdit">
            Speichern
        </button>
    </form>
</div>